(*------------------------------------------*)
(*---------------MAIN WINDOW----------------*)
(*------------------------------------------*)

let window = GWindow.window
  ~width:800
  ~height:600
  ~resizable:false
  ~title:"X-Char" ()


(*------------------------------------------*)
(*--------------MAIN CONTENT----------------*)
(*------------------------------------------*)

let mainbox = GPack.vbox
  ~spacing:10
  ~border_width:10
  ~packing:window#add ()

let toolbar= GButton.toolbar
  ~orientation:`HORIZONTAL
  ~style:`BOTH
  ~packing:(mainbox#pack ~expand:false) ()

let visubox= GPack.hbox
  ~homogeneous: true
  ~spacing:10
  ~border_width:10
  ~packing:mainbox#add ()

let toolbar2= GButton.toolbar
  ~orientation:`HORIZONTAL
  ~style:`BOTH
  ~packing:(mainbox#pack ~expand:false) ()


(*------------------------------------------*)
(*--------------IMAGE WINDOW----------------*)
(*------------------------------------------*)
let scroll = GBin.scrolled_window
  ~height:200
  ~hpolicy:`ALWAYS
  ~vpolicy:`ALWAYS
  ~packing:visubox#add ()


let image=
  let buffer= GdkPixbuf.create
    ~width:750
    ~height: 600 () 
  in
  GMisc.image
    ~pixbuf:buffer
    ~packing:scroll#add ()

(*text*)

let text_output= GText.buffer ()




(*------------------------------------------*)
(*---------------OPEN-----------------------*)
(*------------------------------------------*)
let file= ref ""

let default = function
  | None -> ""
  | Some v -> v

let ask_for_file parent _ =
  let dialog = GWindow.file_chooser_dialog
    ~action:`OPEN
    ~title:"Load an image"
    ~parent () in
    dialog#add_button_stock `CANCEL `CANCEL ;
    dialog#add_select_button_stock `OPEN `OPEN ;
    begin match dialog#run () with
      | `OPEN ->
          file := (default dialog#filename);
          image#set_file (default dialog#filename)
      | `DELETE_EVENT | `CANCEL -> ()
    end;
    dialog#destroy ()

let _open =
  let button = GButton.tool_button
    ~stock:`OPEN
    ~label:"New image"
    ~packing:toolbar#insert () in
  ignore(button#connect#clicked ~callback: (ask_for_file window));
  button

(*------------------------------------------*)
(*--------------ZOOM------------------------*)
(*------------------------------------------*)

let resize scale =
  if (!file<>"") then
    begin
      let img=image#pixbuf in
      let h= int_of_float (float_of_int (GdkPixbuf.get_height img) *. scale) in
      let w= int_of_float (float_of_int (GdkPixbuf.get_width img) *. scale) in
      let newimg=GdkPixbuf.from_file_at_size !file w h in
      image#set_pixbuf newimg
    end
  else ()

let pzoom _= resize 1.25
let dzoom _= resize 0.75

let zoom_in =
  let zi = GButton.tool_button
    ~stock:`ZOOM_IN
    ~packing:toolbar#insert () in
    ignore(zi#connect#clicked ~callback:pzoom);
    zi

let zoom_out =
  let zo = GButton.tool_button
    ~stock:`ZOOM_OUT
    ~packing:toolbar#insert () in
    ignore(zo#connect#clicked ~callback:dzoom);
    zo


(*------------------------------------------*)
(*----------------PROCESSING----------------*)
(*------------------------------------------*)
(*
let process ()=
  Binarization.Sdl_init ();
  let img = Sdlloader.load_image (!file) in
  let img2= ( Binarization.binarization img (Binarization.otsu (Binarization.image2gray img) )) in
    Sdlvideo.save_BMP img2 "picture2.BMP"

*)

(*------------------------------------------*)
(*----------------TEXT WINDOW---------------*)
(*------------------------------------------*)

let scroll2 = GBin.scrolled_window
  ~height:200
  ~hpolicy:`ALWAYS
  ~vpolicy:`ALWAYS
  ~packing:visubox#add ()

let textview=GText.view
  ~buffer:text_output
  ~wrap_mode:`WORD
  ~editable:true
  ~height:200
  ~packing:scroll2#add_with_viewport ()



(*------------------------------------------*)
(*----------------QUIT BUTTON---------------*)
(*------------------------------------------*)



let quit =
  let buttonquit = GButton.tool_button
    ~stock:`QUIT
    ~packing:toolbar2#insert () in
    ignore(buttonquit#connect#clicked ~callback:GMain.quit);
    buttonquit


(*------------------------------------------*)
(*-------------------END--------------------*)
(*------------------------------------------*)



let _ =
  ignore(window#connect#destroy ~callback:GMain.quit);
  window#show ();
  GMain.main ()
